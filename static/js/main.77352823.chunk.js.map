{"version":3,"sources":["logo.svg","components/card.component/Card.jsx","components/cardList.component/CardList.jsx","components/searchBox.component/SearchBox.jsx","App.js","reportWebVitals.js","index.js"],"names":["Card","props","useEffect","console","log","className","src","monster","id","name","email","CardList","monsters","map","SearchBox","placeHolder","handleSearch","type","placeholder","onChange","App","useState","setMonsters","defaultMonster","setDefaultMonster","filteredMonsters","setFilteredMonsters","a","fetch","p","json","length","error","message","_event","target","value","filter","toLowerCase","includes","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"mTAAe,I,kBCGFA,EAAO,SAACC,GAInB,OAHAC,qBAAU,WACRC,QAAQC,IAAIH,KACX,IAED,sBAAKI,UAAU,iBAAf,UACE,qBACEC,IAAG,+BAA0BL,EAAMM,QAAQC,GAAxC,4BAEL,8BAAMP,EAAMM,QAAQE,OACpB,4BAAIR,EAAMM,QAAQG,YCTXC,G,MAAW,SAACV,GAKvB,OAJAC,qBAAU,WACRC,QAAQC,IAAIH,KACX,IAGD,qBAAKI,UAAU,YAAf,SACGJ,EAAMW,SAASC,KAAI,SAACN,GACnB,OAAO,cAAC,EAAD,CAAuBA,QAASA,GAArBA,EAAQC,WCTrBM,G,MAAY,SAAC,GAAmC,IAAjCC,EAAgC,EAAhCA,YAAaC,EAAmB,EAAnBA,aAKvC,OACE,uBACEC,KAAK,SACLZ,UAAU,SACVa,YAAaH,EACbI,SAAUH,MCuDDI,MA9Df,WAAgB,IAAD,EACmBC,mBAAS,IAD5B,mBACNT,EADM,KACIU,EADJ,OAE+BD,mBAAS,IAFxC,mBAENE,EAFM,KAEUC,EAFV,OAGmCH,mBAAS,IAH5C,mBAGNI,EAHM,KAGYC,EAHZ,KAwCb,OAnCAxB,oBAAS,sBAAC,8BAAAyB,EAAA,+EAIUC,MAAM,8CAJhB,cAIAC,EAJA,gBAKiBA,EAAEC,OALnB,OAKAlB,EALA,OAMNT,QAAQC,IAAIQ,GACZU,EAAYV,GACZc,EAAoBd,GAChBA,EAASmB,OAAS,GACpBP,EAAkBZ,EAAS,IAVvB,kDAaNT,QAAQ6B,MAAM,KAAEC,SAbV,kCAgBD,eAhBC,0DAmBP,IAiBD,sBAAK5B,UAAU,MAAf,UACE,8DAWA,cAAC,EAAD,CACEU,YAAaQ,EAAed,KAC5BO,aA7Be,SAACkB,GAEpB,GAA4B,KAAxBA,EAAOC,OAAOC,MAAlB,CAIA,IAAMX,EAAmBb,EAASyB,QAAO,SAAC9B,GACxC,OAAOA,EAAQE,KACZ6B,cACAC,SAASL,EAAOC,OAAOC,MAAME,kBAElCZ,EAAoBD,QARlBC,EAAoBd,MA4BpB,cAAC,EAAD,CAAUA,SAAUa,QCnDXe,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.77352823.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/logo.6ce24c58.svg\";","import React, { useState, useEffect } from \"react\";\r\nimport \"./card.styles.css\";\r\n\r\nexport const Card = (props) => {\r\n  useEffect(() => {\r\n    console.log(props);\r\n  }, []);\r\n  return (\r\n    <div className=\"card-container\">\r\n      <img\r\n        src={`https://robohash.org/${props.monster.id}?set=set2&size=180x180`}\r\n      ></img>\r\n      <div>{props.monster.name}</div>\r\n      <p>{props.monster.email}</p>\r\n    </div>\r\n  );\r\n};\r\n","import React, { useState, useEffect } from \"react\";\r\nimport { Card } from \"../card.component/Card\";\r\nimport \"./card-list.styles.css\";\r\n\r\nexport const CardList = (props) => {\r\n  useEffect(() => {\r\n    console.log(props);\r\n  }, []);\r\n\r\n  return (\r\n    <div className=\"card-list\">\r\n      {props.monsters.map((monster) => {\r\n        return <Card key={monster.id} monster={monster}></Card>;\r\n      })}\r\n    </div>\r\n  );\r\n};\r\n","import React, { useState, useEffect } from \"react\";\r\nimport \"./search-box.styles.css\";\r\n\r\nexport const SearchBox = ({ placeHolder, handleSearch }) => {\r\n  //   useEffect(() => {\r\n  //     console.log(props);\r\n  //   }, []);\r\n\r\n  return (\r\n    <input\r\n      type=\"search\"\r\n      className=\"search\"\r\n      placeholder={placeHolder}\r\n      onChange={handleSearch}\r\n    ></input>\r\n  );\r\n};\r\n","import React, { useState, useEffect } from \"react\";\nimport logo from \"./logo.svg\";\nimport \"./App.css\";\nimport { CardList } from \"./components/cardList.component/CardList\";\nimport { SearchBox } from \"./components/searchBox.component/SearchBox\";\n\nfunction App() {\n  const [monsters, setMonsters] = useState([]);\n  const [defaultMonster, setDefaultMonster] = useState({});\n  const [filteredMonsters, setFilteredMonsters] = useState([]);\n\n  useEffect(async () => {\n    //fetch some monsters.\n\n    try {\n      const p = await fetch(\"https://jsonplaceholder.typicode.com/users\");\n      const monsters = await p.json();\n      console.log(monsters);\n      setMonsters(monsters);\n      setFilteredMonsters(monsters);\n      if (monsters.length > 0) {\n        setDefaultMonster(monsters[0]);\n      }\n    } catch (e) {\n      console.error(e.message);\n    }\n\n    return () => {\n      //destruction\n    };\n  }, []);\n\n  const handleSearch = (_event) => {\n    // console.log(\"[handleSearch]\", _event.target.value);\n    if (_event.target.value === \"\") {\n      setFilteredMonsters(monsters);\n      return;\n    }\n    const filteredMonsters = monsters.filter((monster) => {\n      return monster.name\n        .toLowerCase()\n        .includes(_event.target.value.toLowerCase());\n    });\n    setFilteredMonsters(filteredMonsters);\n  };\n\n  return (\n    <div className=\"App\">\n      <h1>Welcome to monsters rolodex!</h1>\n\n      {/* {monsters.map((monster) => {\n        return (\n          <div key={monster.id}>\n            <div>{monster.name}</div>\n            <div>{monster.email}</div>\n            <br></br>\n          </div>\n        );\n      })} */}\n      <SearchBox\n        placeHolder={defaultMonster.name}\n        handleSearch={handleSearch}\n      ></SearchBox>\n      <CardList monsters={filteredMonsters}></CardList>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}